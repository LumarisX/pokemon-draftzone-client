@use "@angular/material" as mat;
@use "themes/classic.theme" as classic;
@use "themes/shiny.theme" as shiny_theme;
@use "themes/christmas.theme" as xmas;

@use "sass:map";
@use "sass:meta";
$theme-configurations: (
  "classic": (
    prime-primary: classic.$primary-palette,
    prime-tertiary: classic.$tertiary-palette,
    alt-primary: classic.$primary-palette_alt,
    alt-tertiary: classic.$tertiary-palette_alt,
    palettes: classic.$palettes,
  ),
  "shiny": (
    prime-primary: shiny_theme.$primary-palette,
    prime-tertiary: shiny_theme.$tertiary-palette,
    alt-primary: shiny_theme.$primary-palette_alt,
    alt-tertiary: shiny_theme.$tertiary-palette_alt,
    palettes: shiny_theme.$palettes,
  ),
  "christmas": (
    prime-primary: xmas.$primary-palette,
    prime-tertiary: xmas.$tertiary-palette,
    alt-primary: xmas.$primary-palette_alt,
    alt-tertiary: xmas.$tertiary-palette_alt,
    palettes: xmas.$palettes,
  ),
);

@mixin _apply-mat-theme-core($primary-palette, $tertiary-palette, $theme-type) {
  @if $primary-palette and $tertiary-palette {
    @if meta.type-of($primary-palette) ==
      map and
      meta.type-of($tertiary-palette) ==
      map
    {
      @include mat.theme(
        (
          color: (
            primary: $primary-palette,
            tertiary: $tertiary-palette,
            theme-type: $theme-type,
          ),
        )
      );
    } @else {
      @warn "Could not apply theme: Provided palettes are not valid maps (primary: #{type-of($primary-palette)}, tertiary: #{type-of($tertiary-palette)}) for theme-type '#{$theme-type}'.";
    }
  } @else {
    @warn "Could not apply theme: Missing primary or tertiary palette variables for theme-type '#{$theme-type}'. Check theme configuration map.";
  }
}

@mixin generate-palette-variables($palettes, $is-alt: false) {
  @if $is-alt {
    @each $key, $value in map.get($palettes, primary-alt) {
      --primary-#{$key}: #{$value};
    }
    @each $key, $value in map.get($palettes, secondary-alt) {
      --secondary-#{$key}: #{$value};
    }
    @each $key, $value in map.get($palettes, primary) {
      --tertiary-#{$key}: #{$value};
    }
  } @else {
    @each $key, $value in map.get($palettes, primary) {
      --primary-#{$key}: #{$value};
    }
    @each $key, $value in map.get($palettes, secondary) {
      --secondary-#{$key}: #{$value};
    }
    @each $key, $value in map.get($palettes, primary-alt) {
      --tertiary-#{$key}: #{$value};
    }
  }
}

@mixin apply-theme-variants(
  $prime-primary,
  $prime-tertiary,
  $alt-primary,
  $alt-tertiary,
  $palettes
) {
  .theme-prime,
  [sub-theme="prime"] {
    @include generate-palette-variables($palettes);
    & {
      @include _apply-mat-theme-core($prime-primary, $prime-tertiary, light);
      @include apply-custom-material-overrides();
    }
  }

  .theme-alt,
  .alternate,
  [sub-theme="alt"] {
    @include generate-palette-variables($palettes, true);
    & {
      @include _apply-mat-theme-core($alt-primary, $alt-tertiary, light);
      @include apply-custom-material-overrides();
    }
  }

  &[light-mode="dark"] {
    .theme-prime,
    [sub-theme="prime"] {
      @include _apply-mat-theme-core($prime-primary, $prime-tertiary, dark);
    }
    & {
      @include apply-custom-material-overrides();
    }

    .theme-alt,
    .alternate,
    [sub-theme="alt"] {
      @include _apply-mat-theme-core($alt-primary, $alt-tertiary, dark);
      & {
        @include apply-custom-material-overrides();
      }
    }
  }
}

@mixin apply-custom-material-overrides() {
}

:root {
  @each $theme-attribute-value, $palette-map in $theme-configurations {
    &[theme-name="#{$theme-attribute-value}"] {
      @include apply-theme-variants(
        map.get($palette-map, prime-primary),
        map.get($palette-map, prime-tertiary),
        map.get($palette-map, alt-primary),
        map.get($palette-map, alt-tertiary),
        map.get($palette-map, palettes)
      );
    }
  }

  pdz-root {
    @include mat.theme-overrides(
      (
        // Primary Palette
        primary: var(--pdz-color-primary),
        on-primary: var(--pdz-color-on-primary),
        primary-container: var(--pdz-color-primary-container),
        on-primary-container: var(--pdz-color-on-primary-container),
        // Secondary Palette
        secondary: var(--pdz-color-secondary),
        on-secondary: var(--pdz-color-on-secondary),
        secondary-container: var(--pdz-color-secondary-container),
        on-secondary-container: var(--pdz-color-on-secondary-container),
        // Tertiary Palette (mapped to your secondary colors as in the original)
        tertiary: var(--pdz-color-secondary),
        on-tertiary: var(--pdz-color-on-secondary),
        tertiary-container: var(--pdz-color-secondary-container),
        on-tertiary-container: var(--pdz-color-on-secondary-container),
        // Error Palette
        error: var(--pdz-color-error),
        on-error: var(--pdz-color-on-error),
        error-container: var(--pdz-color-error-container),
        on-error-container: var(--pdz-color-on-error-container),
        // Surface Palette
        background: var(--pdz-color-background),
        on-background: var(--pdz-color-on-surface),
        surface: var(--pdz-color-surface),
        on-surface: var(--pdz-color-on-surface),
        surface-variant: var(--pdz-color-surface-variant),
        on-surface-variant: var(--pdz-color-on-surface-variant),
        // Surface Container Tones
        surface-container-lowest: var(--pdz-color-surface-container-lowest),
        surface-container-low: var(--pdz-color-surface-container-low),
        surface-container: var(--pdz-color-surface-container),
        surface-container-high: var(--pdz-color-surface-container-high),
        surface-container-highest: var(--pdz-color-surface-container-highest),
        // Outline & Misc
        outline: var(--pdz-color-outline),
        outline-variant: var(--pdz-color-outline-variant),
        scrim: var(--pdz-color-scrim),
        shadow: var(--pdz-color-shadow)
      )
    );
  }
}

@include mat.tooltip-overrides(
  (
    container-color: var(--pdz-secondary),
    supporting-text-color: var(--pdz-on-secondary),
    supporting-text-size: small,
  )
);

.dialog-warn {
  @include mat.dialog-overrides(
    (
      container-color: var(--pdz-error-container),
      subhead-color: var(--pdz-error),
      supporting-text-color: var(--pdz-on-error-container),
    )
  );

  @include mat.button-overrides(
    (
      text-label-text-color: var(--pdz-error),
      text-state-layer-color: var(--pdz-error),
    )
  );
}

.chart-tooltip {
  max-width: 16rem;
  box-shadow: var(--pdz-level-4);
  .title-container {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    font-size: 1.2em;

    .title-wrapper {
      flex-grow: 1;
      justify-content: center;
      align-items: center;
      text-align: center;
    }

    .icon-container {
      flex-shrink: 0;
      display: flex;
      align-items: center;
      padding-left: 1rem;

      div:not(:first-child) {
        padding-left: 0.25rem;
      }

      .type-wrapper {
        width: 4rem;
        height: 1.5;
        object-fit: contain;
      }

      .category-wrapper {
        width: 1.5rem;
        height: 1.5rem;
        object-fit: contain;
      }
    }
  }
  .details-container {
    display: flex;
    width: 100%;
    justify-content: space-between;
    div:not(:first-child) {
      padding-left: 0.5rem;
    }
  }

  .desc-container {
    max-width: 100%;
    font-size: 0.8em;
    word-wrap: break-word;
    white-space: normal;
  }
}

.flex-overlay {
  display: flex;
  flex-direction: column;
  background-color: var(--pdz-surface);
  color: var(--pdz-on-surface);
  border-radius: var(--pdz-shape-corner-lg);
  box-shadow: var(--pdz-level-3);
  padding: var(--pdz-space-xs);
  mat-icon {
    color: var(--pdz-primary);
  }
  label {
    display: flex;
    align-items: center;
    > :not(:first-child) {
      padding-left: 0.25rem;
    }
  }
}
.cdk-overlay-container {
  z-index: 6000 !important;
}
