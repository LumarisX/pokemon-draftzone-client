@use "@angular/material" as mat;
@use "sass:map";
@use "sass:meta";
@use "themes/classic.theme" as classic;
@use "themes/shiny.theme" as shiny_theme;
@use "themes/christmas.theme" as xmas;

$theme-configurations: (
  "classic": (
    prime-primary: classic.$primary-palette,
    prime-tertiary: classic.$tertiary-palette,
    alt-primary: classic.$primary-palette_alt,
    alt-tertiary: classic.$tertiary-palette_alt,
    palettes: classic.$palettes,
  ),
  "shiny": (
    prime-primary: shiny_theme.$primary-palette,
    prime-tertiary: shiny_theme.$tertiary-palette,
    alt-primary: shiny_theme.$primary-palette_alt,
    alt-tertiary: shiny_theme.$tertiary-palette_alt,
    palettes: shiny_theme.$palettes,
  ),
  "christmas": (
    prime-primary: xmas.$primary-palette,
    prime-tertiary: xmas.$tertiary-palette,
    alt-primary: xmas.$primary-palette_alt,
    alt-tertiary: xmas.$tertiary-palette_alt,
    palettes: xmas.$palettes,
  ),
);

@mixin _apply-mat-theme-core($primary-palette, $tertiary-palette, $theme-type) {
  @if $primary-palette and $tertiary-palette {
    @if meta.type-of($primary-palette) ==
      map and
      meta.type-of($tertiary-palette) ==
      map
    {
      @include mat.theme(
        (
          color: (
            primary: $primary-palette,
            tertiary: $tertiary-palette,
            theme-type: $theme-type,
          ),
        )
      );
    } @else {
      @warn "Could not apply theme: Provided palettes are not valid maps (primary: #{type-of($primary-palette)}, tertiary: #{type-of($tertiary-palette)}) for theme-type '#{$theme-type}'.";
    }
  } @else {
    @warn "Could not apply theme: Missing primary or tertiary palette variables for theme-type '#{$theme-type}'. Check theme configuration map.";
  }
}

@mixin generate-palette-variables($palettes, $is-alt: false) {
  @if $is-alt {
    @each $key, $value in map.get($palettes, primary-alt) {
      --primary-#{$key}: #{$value};
    }
    @each $key, $value in map.get($palettes, secondary-alt) {
      --secondary-#{$key}: #{$value};
    }
    @each $key, $value in map.get($palettes, primary) {
      --tertiary-#{$key}: #{$value};
    }
  } @else {
    @each $key, $value in map.get($palettes, primary) {
      --primary-#{$key}: #{$value};
    }
    @each $key, $value in map.get($palettes, secondary) {
      --secondary-#{$key}: #{$value};
    }
    @each $key, $value in map.get($palettes, primary-alt) {
      --tertiary-#{$key}: #{$value};
    }
  }
}

@mixin apply-theme-variants(
  $prime-primary,
  $prime-tertiary,
  $alt-primary,
  $alt-tertiary,
  $palettes
) {
  .theme-prime,
  [sub-theme="prime"] {
    @include generate-palette-variables($palettes);
    & {
      @include _apply-mat-theme-core($prime-primary, $prime-tertiary, light);
      @include apply-custom-material-overrides();
    }
  }

  .theme-alt,
  .alternate,
  [sub-theme="alt"] {
    @include generate-palette-variables($palettes, true);
    & {
      @include _apply-mat-theme-core($alt-primary, $alt-tertiary, light);
      @include apply-custom-material-overrides();
    }
  }

  &[light-mode="dark"] {
    .theme-prime,
    [sub-theme="prime"] {
      @include _apply-mat-theme-core($prime-primary, $prime-tertiary, dark);
    }
    & {
      @include apply-custom-material-overrides();
    }

    .theme-alt,
    .alternate,
    [sub-theme="alt"] {
      @include _apply-mat-theme-core($alt-primary, $alt-tertiary, dark);
      & {
        @include apply-custom-material-overrides();
      }
    }
  }
}

@mixin apply-custom-material-overrides() {
}

$pdz-shadows: (
  0: (
    0px 0px 0px 0px rgba(0, 0, 0, 0.2),
    0px 0px 0px 0px rgba(0, 0, 0, 0.14),
    0px 0px 0px 0px rgba(0, 0, 0, 0.12),
  ),
  1: (
    0px 2px 1px -1px rgba(0, 0, 0, 0.2),
    0px 1px 1px 0px rgba(0, 0, 0, 0.14),
    0px 1px 3px 0px rgba(0, 0, 0, 0.12),
  ),
  2: (
    0px 3px 3px -2px rgba(0, 0, 0, 0.2),
    0px 3px 4px 0px rgba(0, 0, 0, 0.14),
    0px 1px 8px 0px rgba(0, 0, 0, 0.12),
  ),
  3: (
    0px 3px 5px -1px rgba(0, 0, 0, 0.2),
    0px 6px 10px 0px rgba(0, 0, 0, 0.14),
    0px 1px 18px 0px rgba(0, 0, 0, 0.12),
  ),
  4: (
    0px 5px 5px -3px rgba(0, 0, 0, 0.2),
    0px 8px 10px 1px rgba(0, 0, 0, 0.14),
    0px 3px 14px 2px rgba(0, 0, 0, 0.12),
  ),
  5: (
    0px 7px 8px -4px rgba(0, 0, 0, 0.2),
    0px 12px 17px 2px rgba(0, 0, 0, 0.14),
    0px 5px 22px 4px rgba(0, 0, 0, 0.12),
  ),
  "-1": (
    inset 0px 2px 2px -1px rgba(0, 0, 0, 0.2),
    inset 0px 1px 2px 0px rgba(0, 0, 0, 0.14),
    inset 0px 1px 4px 0px rgba(0, 0, 0, 0.12),
  ),
  "-2": (
    inset 0px 3px 3px -2px rgba(0, 0, 0, 0.2),
    inset 0px 3px 4px 0px rgba(0, 0, 0, 0.14),
    inset 0px 1px 8px 0px rgba(0, 0, 0, 0.12),
  ),
  "-3": (
    inset 0px 3px 5px -1px rgba(0, 0, 0, 0.2),
    inset 0px 6px 10px 0px rgba(0, 0, 0, 0.14),
    inset 0px 1px 18px 0px rgba(0, 0, 0, 0.12),
  ),
  "-4": (
    inset 0px 5px 5px -3px rgba(0, 0, 0, 0.2),
    inset 0px 8px 10px 1px rgba(0, 0, 0, 0.14),
    inset 0px 3px 14px 2px rgba(0, 0, 0, 0.12),
  ),
  "-5": (
    inset 0px 7px 8px -4px rgba(0, 0, 0, 0.2),
    inset 0px 12px 17px 2px rgba(0, 0, 0, 0.14),
    inset 0px 5px 22px 4px rgba(0, 0, 0, 0.12),
  ),
);

:root {
  @each $theme-attribute-value, $palette-map in $theme-configurations {
    &[theme-name="#{$theme-attribute-value}"] {
      @include apply-theme-variants(
        map.get($palette-map, prime-primary),
        map.get($palette-map, prime-tertiary),
        map.get($palette-map, alt-primary),
        map.get($palette-map, alt-tertiary),
        map.get($palette-map, palettes)
      );
    }
  }

  @each $level, $shadows in $pdz-shadows {
    #{"--pdz-level" + $level}: #{$shadows};
  }
}

@mixin pdz-shadow($level: 1) {
  box-shadow: var(#{"--pdz-level" + $level});
}
